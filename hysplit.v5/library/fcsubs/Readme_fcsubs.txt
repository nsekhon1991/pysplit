DIRECTORY: /fcsubs
________________________________________________________________

This directory contains fortran callable C-routines that can be
used to do direct access to a variable length binary data file.  It is
used in conjunction with the noaa grib decoders (see grib_noaa subdirectory)
The routines were developed by Al Taylor (albion.taylor@noaa.gov)

These "C" version routines should be whenever possible. The Fortran version 
of these subroutines exist in libhysplit.a but they are much slower than 
the C routines. Therefore the LIB_fcsubs library should preceed the hysplit
library in all compilations.


For platforms: CRAY SPARC RS6000 HP SGI

For 64-bit systems (AIX8):
QWORD = -q64
XWORD = -X64

CC=cc
AR=ar
ARFLAGS = -rv $(XWORD)
CFLAGS = -O $(QWORD) -D$(MACHINE)
FFLAGS = -O $(QWORD)

INSTALLATION:

To install the library of FORTRAN-callable, C-based subroutines (fcsubs),
in the simplest case, change to the fcsubs source directory, then
issue the command:

./configure

followed by the command

make

which will create the library in the form of a file lib(compname)fcsubs.a,
where (compname) is the name of a FORTRAN compiler, e.g. libg77fcsubs.a.


To install the library in the default library setting (usually /usr/local/lib)
type

make install

To install in a library directory other than the default, e.g. your own lib
directory ~/lib, use

make libdir=~/lib install
(Or, at configure time, the default libdir may be set with
./configure libdir=~/lib)

A test program will be run with the command "make test".

___________________________________________________
CONFIGURING FOR VARIOUS FORTRAN COMPILERS

Because different FORTRAN compilers use different conventions for naming
subroutines in actual libraries, the fcsubs must be configured to the
convention for the compiler being used.

The configure script will try a sequence of compiler names until it finds one
in the path on the current system that works and uses it.  For systems
with unusual compiler names, or several compilers available, you may
force the selection of a specific compiler (say, g77) at configure time with

./configure F77=g77

The compiler chosen must be in your path at configure time, so the configure
script can determine the subroutine naming conventions.

OTHER MAKE TARGETS

Unneeded object (.o) and lib (.a) files may be removed from the source
directory by typing "make clean".  Other files may be removed to return
to the distribution sate by invoking "make distclean".  Caution: this will
remove the Makefile until it is regenerated by configure.

If you want to create several libraries to use with different compilers,
use make clean, followed by ./configure F77=(next compiler name) for
each compiler.

____________________________________________________
OTHER CONFIGURE TARGETS

./configure --help 

will provife more information on the use of configure

./configure --enable-aix-64

will configure for the creation of 64-bit libraries, only on AIX
RS-6000 and PowerPC machines which support 64-bit libraries.  64-bit
library support on other machines may be added later, if needed.
The fcsubs routines provide a facility to FORTRAN-77 programs to read,
write, and manipulate binary files created by other facilities, which
do not have the usual UNFORMATTED formatting.

These routines should be used on files that are not concurrently OPENed
which standard FORTRAN I/O routines.

To use, insert the appropriate TYPE statements and FUNCTION or CALL
statements, as defined below.  Link the library associated with your
FORTRAN compiler (e.g. g77, whose library is named libg77fcsubs.a)
using, e.g.

g77 -o myprog myprog.f -Llibpath -lg77fcsubs

where libpath is the directory in which libg77fcsubs.a is located.  If
using a different compiler, e.g. f90, replace g77 with f90 throughout
and libpath with the location of the libf90fcsubs.a library, configured and
compiled for the f90 compiler, is located.

________________________________________________________
FCSUBS USAGE

Following are the TYPE statements and CALLs used by fcsubs:

	CHARACTER * 40 FNAME
C  Name of the file being read/written to
	CHARACTER * 2 ACCESS
C  use 'r' for read, 'w' for write, 'rw' for both
	CHARACTER *80 BUFFER
	INTEGER HANDLE,LENGTH,POS
        INTEGER WIDTH,COUNT

	INTEGER FCOPEN,FCLEN,FCGTPS

	HANDLE = FCOPEN(FNAME, ACCESS)

C causes INTEGER FUNCTION FCOPEN to open the file named FNAME
C for access defined by ACCESS, and returns file identifier as
C an integer in HANDLE.  In the event of an error, HANDLE will
C be negative.

C---------------    FILE SIZE ROUTINES --------------------------


	LENGTH = FCLEN(HANDLE)
C Returns the length in bytes of the file whose identifier is HANDLE.  In
C the event of an error, a negative number is returned.

	CALL FCTRNC(HANDLE, LENGTH, *err)
C truncates the file whose identifier is HANDLE to the size LENGTH bytes.
C In the case of an error, transfers control to the statement labeled err.

C---------------   FILE POSITION ROUTINES ------------------------

	POS = FCGTPS(HANDLE) 
C returns the current position (offset in bytes from beginning) within
C the file whose identifier is HANDLE.  In the event of an error, a
C negative number will be returned in POS.

	CALL FCPTPS(HANDLE, POS, *err)
C moves the file whose identifier is HANDLE to the position (bytes offset
C from beginning) given by POS.  In the case of failure, control will
C be transferred to the statement labeled err.

C---------------   READ/WRITE ROUTINES  -------------------------

	CALL FCREAD(HANDLE, BUFFER, WIDTH, COUNT, *err)
C reads COUNT groups of ABS(WIDTH) bytes from the file whose identifier
C is HANDLE and places them in BUFFER.  If WIDTH is less than zero,
C each group of bytes will be reversed in order, low byte to high byte.
C This will assist reading binary data written by machines of opposite
C Endian-orientation.  In case of error, control will be transferred
C to the statement labeled err.

	CALL FCWRIT(HANDLE, BUFFER, WIDTH, COUNT, *err)
C writes COUNT groups of ABS(WIDTH) bytes from BUFFER to the file whose
C identifier is HANDLE.  If WIDTH is less than zero, each group of bytes
C will be reversed in order, low byte to high byte. This will assist
C writing binary data to be read by machines of opposite Endian-orientation.
C In case of error, control will be transferred to the statement labeled err.

C-----------------   CLOSE FILE --------------------------------

	CALL FCCLOS(HANDLE, *err)
C Closes the file whose identifier is HANDLE.  In case of error, control
C will be transferred to the stetement labeled err.

C------------------  ANCILLARY ROUTINE -------------------------

	CALL SWAP(BUFFER, WIDTH, COUNT) 
C Reverses the Endian-orientation of Count groups of size WIDTH each,
C starting at BUFFER.  This will ease manipulation of mixed binary
C records written by machines of opposite Endian-ness.
